;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables (list 
   (semanticdb-table "bbdb-com.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("bbdb" include nil nil [1057 1072]) ("cl" include nil nil [1144 1157]) ("bbdb-extract-address-components-func" variable nil nil [1160 1205]) ("if" code nil nil [1482 1625]) ("mh-send" function (:prototype-flag t) nil [1629 1655]) ("vm-session-initialization" function (:prototype-flag t) nil [1658 1708]) ("vm-mail-internal" function (:prototype-flag t) nil [1711 1750]) ("mew-send" function (:prototype-flag t) nil [1753 1779]) ("bbdb-header-start" function (:prototype-flag t) nil [1782 1824]) ("bbdb-extract-field-value" function (:prototype-flag t) nil [1827 1876]) ("bbdb-fontify-buffer" function (:prototype-flag t) nil [1879 1921]) ("Info-goto-node" function (:prototype-flag t) nil [1924 1957]) ("if" code nil nil [2233 2558]) ("bbdb-define-all-aliases-needs-rebuilt" variable nil nil [2561 2611]) ("bbdb-default-country" variable (:user-visible-flag t :default-value (quote "Emacs")) nil [2613 2793]) ("bbdb-grovel-elide-arg" function (:arguments ("arg")) nil [2854 2975]) ("bbdb-search-invert" variable nil nil [2977 3151]) ("bbdb-search-invert-p" function nil nil [3153 3368]) ("bbdb-search-invert-set" function (:user-visible-flag t) nil [3385 3787]) ("bbdb-search" function (:arguments ("records" "&optional" "name" "company" "net" "notes" "phone")) nil [3789 8879]) ("bbdb-search-prompt" function (:arguments ("prompt" "&rest" "rest")) nil [8881 9214]) ("bbdb" function (:user-visible-flag t :arguments ("string" "elidep")) nil [9231 9865]) ("bbdb-name" function (:user-visible-flag t :arguments ("string" "elidep")) nil [9882 10260]) ("bbdb-company" function (:user-visible-flag t :arguments ("string" "elidep")) nil [10277 10630]) ("bbdb-net" function (:user-visible-flag t :arguments ("string" "elidep")) nil [10647 11013]) ("bbdb-notes" function (:user-visible-flag t :arguments ("which" "string" "elidep")) nil [11030 12006]) ("bbdb-phones" function (:user-visible-flag t :arguments ("string" "elidep")) nil [12008 12385]) ("bbdb-changed" function (:user-visible-flag t :arguments ("elidep")) nil [12402 13172]) ("bbdb-display" function (:user-visible-flag t :arguments ("records")) nil [13174 13390]) ("bbdb-display-some" function (:arguments ("function")) nil [13392 13722]) ("bbdb-redisplay-records" function nil nil [13760 14237]) ("bbdb-redisplay-one-record" function (:arguments ("record" "&optional" "record-cons" "next-record-cons" "delete-p")) nil [14239 15880]) ("bbdb-phone-area-regexp" variable (:constant-flag t :default-value "(?[ 	]*\\+?1?[ 	]*[-(]?[ 	]*[-(]?[ 	]*\\([2-9][0-9][0-9]\\)[ 	]*)?[-./ 	]*") nil [16176 16294]) ("bbdb-phone-main-regexp" variable (:constant-flag t :default-value "\\([1-9][0-9][0-9]\\)[ 	]*[-.]?[ 	]*\\([0-9][0-9][0-9][0-9]\\)[ 	]*") nil [16295 16401]) ("bbdb-phone-ext-regexp" variable (:constant-flag t :default-value "x?[ 	]*\\([0-9]+\\)[ 	]*") nil [16403 16465]) ("bbdb-phone-regexp-1" variable (:constant-flag t :default-value (concat "^[ 	]*" bbdb-phone-area-regexp bbdb-phone-main-regexp bbdb-phone-ext-regexp "$")) nil [16467 16588]) ("bbdb-phone-regexp-2" variable (:constant-flag t :default-value (concat "^[ 	]*" bbdb-phone-area-regexp bbdb-phone-main-regexp "$")) nil [16589 16688]) ("bbdb-phone-regexp-3" variable (:constant-flag t :default-value (concat "^[ 	]*" bbdb-phone-main-regexp bbdb-phone-ext-regexp "$")) nil [16689 16787]) ("bbdb-phone-regexp-4" variable (:constant-flag t :default-value (concat "^[ 	]*" bbdb-phone-main-regexp "$")) nil [16788 16864]) ("bbdb-phone-regexp-5" variable (:constant-flag t :default-value (concat "^[ 	]*" bbdb-phone-ext-regexp "$")) nil [16865 16940]) ("bbdb-parse-phone-number" function (:arguments ("string" "&optional" "number-type")) nil [16942 19445]) ("bbdb-expand-mail-aliases" variable (:default-value t) nil [19473 19615]) ("bbdb-check-zip-codes-p" variable (:default-value t) nil [19617 19851]) ("bbdb-legal-zip-codes" variable (:default-value (quote ("^$" "^[ 	
]*[0-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[ 	
]*$" "^[ 	
]*\\([0-9][0-9][0-9][0-9][0-9]\\)[ 	
]*-?[ 	
]*\\([0-9][0-9][0-9][0-9]?\\)[ 	
]*$" "^[ 	
]*\\([A-Za-z0-9]+\\)[ 	
]+\\([A-Za-z0-9]+\\)[ 	
]*$" "^[ 	
]*\\([A-Z]+\\)[ 	
]*-?[ 	
]*\\([0-9]+ ?[A-Z]*\\)[ 	
]*$" "^[ 	
]*\\([A-Z]+\\)[ 	
]*-?[ 	
]*\\([0-9]+\\)[ 	
]+\\([0-9]+\\)[ 	
]*$"))) nil [19853 21045]) ("bbdb-parse-zip-string" function (:arguments ("string")) nil [21047 21539]) ("bbdb-read-new-record" function nil nil [21541 25293]) ("bbdb-create" function (:user-visible-flag t :arguments ("record")) nil [25310 25754]) ("bbdb-check-type" function (:arguments ("place" "predicate")) nil [25757 26354]) ("bbdb-create-internal" function (:arguments ("name" "company" "net" "addrs" "phones" "notes")) nil [26356 30429]) ("bbdb-current-record" function (:arguments ("&optional" "planning-on-modifying")) nil [30453 31119]) ("bbdb-record-get-field-internal" function (:arguments ("record" "field")) nil [31158 31629]) ("bbdb-record-store-field-internal" function (:arguments ("record" "field" "value")) nil [31631 32166]) ("bbdb-record-edit-field-internal" function (:arguments ("record" "field" "&optional" "which" "location")) nil [32168 32788]) ("bbdb-current-field" function (:arguments ("&optional" "planning-on-modifying")) nil [32791 32990]) ("bbdb-apply-next-command-to-all-records" function (:user-visible-flag t) nil [33007 33487]) ("bbdb-do-all-records-p" function nil nil [33489 33660]) ("bbdb-append-records" variable nil nil [33663 33695]) ("bbdb-append-records-p" function nil nil [33712 34228]) ("bbdb-append-records" function (:user-visible-flag t :arguments ("arg")) nil [34245 35299]) ("bbdb-insert-new-field" function (:user-visible-flag t :arguments ("record" "name" "contents")) nil [35316 40217]) ("bbdb-prompt-for-new-field-value" function (:arguments ("name")) nil [40219 41933]) ("bbdb-add-new-field" function (:arguments ("name")) nil [41935 42448]) ("bbdb-edit-current-field" function (:user-visible-flag t) nil [42465 43493]) ("bbdb-record-edit-name" function (:arguments ("bbdb-record")) nil [43495 46012]) ("bbdb-record-edit-company" function (:arguments ("bbdb-record")) nil [46014 46926]) ("bbdb-address-edit-default" function (:arguments ("addr")) nil [46928 48779]) ("bbdb-address-edit-continental" function (:arguments ("addr")) nil [48781 50584]) ("bbdb-address-editing-function" variable (:default-value (quote bbdb-address-edit-default)) nil [50586 50947]) ("bbdb-record-edit-address" function (:arguments ("addr" "&optional" "location")) nil [50949 51869]) ("bbdb-record-edit-phone" function (:arguments ("phone-number" "&optional" "location")) nil [51871 53051]) ("bbdb-record-edit-net" function (:arguments ("bbdb-record")) nil [53053 54262]) ("bbdb-record-edit-aka" function (:arguments ("bbdb-record")) nil [54264 55404]) ("bbdb-record-edit-notes" function (:arguments ("bbdb-record" "&optional" "regrind")) nil [55421 55815]) ("bbdb-record-edit-property" function (:arguments ("bbdb-record" "&optional" "prop" "regrind")) nil [55832 56704]) ("bbdb-field-equal" function (:arguments ("x" "y")) nil [56707 56919]) ("bbdb-next-field" function (:arguments ("&optional" "count" "planning-on-modifying")) nil [56921 57764]) ("bbdb-transpose-fields" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [57781 61126]) ("bbdb-delete-current-field-or-record" function (:user-visible-flag t :arguments ("&optional" "records" "noprompt")) nil [61144 63163]) ("bbdb-delete-current-record" function (:user-visible-flag t :arguments ("recs" "&optional" "noprompt")) nil [63180 65181]) ("bbdb-change-records-state-and-redisplay" function (:arguments ("desired-state" "records")) nil [65183 65491]) ("bbdb-toggle-all-records-display-layout" function (:user-visible-flag t :arguments ("arg" "&optional" "records")) nil [65508 66751]) ("bbdb-toggle-records-display-layout" function (:user-visible-flag t :arguments ("arg")) nil [66768 67817]) ("bbdb-display-all-records-completely" function (:user-visible-flag t :arguments ("arg" "&optional" "records")) nil [67834 68454]) ("bbdb-display-record-completely" function (:user-visible-flag t :arguments ("arg")) nil [68471 68778]) ("bbdb-display-record-with-layout" function (:user-visible-flag t :arguments ("layout" "&optional" "records")) nil [68795 69297]) ("bbdb-omit-record" function (:user-visible-flag t :arguments ("n")) nil [69314 70319]) ("bbdb-refile-notes-generate-alist" variable (:user-visible-flag t :default-value (quote ((creation-date . bbdb-refile-notes-string-least) (timestamp . bbdb-refile-notes-string-most)))) nil [70350 70717]) ("bbdb-refile-notes-default-merge-function" variable (:user-visible-flag t :default-value (quote bbdb-refile-notes-default-merge-function)) nil [70719 71031]) ("bbdb-refile-notes-default-merge-function" function (:arguments ("string1" "string2")) nil [71034 71185]) ("bbdb-refile-notes-remove-duplicates" function (:arguments ("string1" "string2")) nil [71187 71581]) ("bbdb-refile-notes-string-least" function (:arguments ("string1" "string2")) nil [71583 71741]) ("bbdb-refile-notes-string-most" function (:arguments ("string1" "string2")) nil [71743 71904]) ("bbdb-merge-lists!" function (:arguments ("l1" "l2" "cmp" "&optional" "mod")) nil [71906 72740]) ("bbdb-merge-records" function (:arguments ("old-record" "new-record")) nil [72742 77665]) ("bbdb-refile-record" function (:user-visible-flag t :arguments ("old-record" "new-record")) nil [77682 79490]) ("bbdb-notes-sort-order" variable (:user-visible-flag t :default-value (quote ((notes . 0) (www . 1) (ftp . 2) (gopher . 3) (telnet . 4) (mail-alias . 5) (mail-folder . 6) (lpr . 7) (creation-date . 1000) (timestamp . 1001)))) nil [79510 79966]) ("bbdb-sort-notes" function (:arguments ("rec")) nil [79983 80320]) ("bbdb-sort-phones" function (:arguments ("rec")) nil [80337 80593]) ("bbdb-sort-addresses" function (:arguments ("rec")) nil [80610 80878]) ("bbdb-dwim-net-address-allow-redundancy" variable (:user-visible-flag t) nil [80906 81224]) ("bbdb-dwim-net-address" function (:arguments ("record" "&optional" "net")) nil [81241 84172]) ("bbdb-send-mail-internal" function (:arguments ("&optional" "to" "subj" "records")) nil [84175 85741]) ("bbdb-send-mail" function (:user-visible-flag t :arguments ("bbdb-record" "&optional" "subject")) nil [85758 86482]) ("bbdb-send-mail-1" function (:arguments ("bbdb-record" "&optional" "subject")) nil [86485 87052]) ("bbdb-send-mail-many" function (:arguments ("records" "&optional" "subject")) nil [87055 88086]) ("bbdb-yank-addresses" function (:user-visible-flag t) nil [88089 89911]) ("bbdb-show-all-recipients" function (:user-visible-flag t) nil [89928 91045]) ("bbdb-completion-check-record" function (:arguments ("sym" "rec")) nil [91079 91929]) ("bbdb-completion-predicate" function (:arguments ("symbol")) nil [91947 92464]) ("bbdb-completing-read-record" function (:arguments ("prompt" "&optional" "omit-records")) nil [92466 93521]) ("bbdb-completing-read-one-record" function (:arguments ("prompt" "&optional" "omit-records")) nil [93523 94610]) ("bbdb-read-addresses-with-completion-map" variable (:default-value (let ((map (copy-keymap minibuffer-local-completion-map))) (define-key map " " (quote self-insert-command)) (define-key map "	" (quote bbdb-complete-name)) (define-key map "\211" (quote bbdb-complete-name)) map)) nil [94612 94871]) ("bbdb-read-addresses-with-completion" function (:arguments ("prompt" "&optional" "default")) nil [94888 95136]) ("bbdb-complete-name-saved-window-config" variable nil nil [95230 95281]) ("bbdb-complete-name-cleanup" function nil nil [95325 95699]) ("bbdb-display-completion-list" function (:arguments ("list" "&optional" "callback" "data")) nil [95701 96393]) ("bbdb-complete-clicked-name" function (:arguments ("event" "extent" "user-data")) nil [96395 96871]) ("bbdb-list-overlap" function (:arguments ("l1" "l2")) nil [96874 97033]) ("bbdb-remove-assoc-duplicates" function (:arguments ("l")) nil [97035 97241]) ("bbdb-complete-name-allow-cycling" variable nil nil [97243 97466]) ("bbdb-complete-name-hooks" variable nil nil [97468 97612]) ("auto-fill-hook" variable nil nil [97633 97656]) ("bbdb-complete-name" function (:user-visible-flag t :arguments ("&optional" "start-pos")) nil [97674 111248]) ("bbdb-yank" function (:user-visible-flag t) nil [111265 111497]) ("bbdb-define-all-aliases-field" variable (:user-visible-flag t :default-value (quote mail-alias)) nil [111535 111680]) ("bbdb-define-all-aliases-mode" variable (:user-visible-flag t :default-value (quote first)) nil [111682 112302]) ("bbdb-define-all-aliases" function (:user-visible-flag t) nil [112319 118138]) ("bbdb-rebuilt-all-aliases" function nil nil [118295 118617]) ("bbdb-mail-abbrev-expand-hook" variable (:user-visible-flag t) nil [118619 118830]) ("bbdb-mail-abbrev-expand-hook" function (:arguments ("alias" "records")) nil [118832 119216]) ("bbdb-get-mail-aliases" function nil nil [119218 119864]) ("bbdb-add-or-remove-mail-alias" function (:user-visible-flag t :arguments ("&optional" "records" "newalias" "delete")) nil [119881 121586]) ("bbdb-dial-local-prefix-alist" variable (:default-value (quote (((if (integerp bbdb-default-area-code) (format "(%03d)" bbdb-default-area-code) (or bbdb-default-area-code "")) "")))) nil [121619 122118]) ("bbdb-dial-local-prefix" variable nil nil [122120 122638]) ("bbdb-dial-long-distance-prefix" variable nil nil [122640 123185]) ("bbdb-sound-player" variable nil nil [123187 123444]) ("bbdb-sound-files" variable (:default-value (quote ["/usr/demo/SOUND/sounds/touchtone.0.au" "/usr/demo/SOUND/sounds/touchtone.1.au" "/usr/demo/SOUND/sounds/touchtone.2.au" "/usr/demo/SOUND/sounds/touchtone.3.au" "/usr/demo/SOUND/sounds/touchtone.4.au" "/usr/demo/SOUND/sounds/touchtone.5.au" "/usr/demo/SOUND/sounds/touchtone.6.au" "/usr/demo/SOUND/sounds/touchtone.7.au" "/usr/demo/SOUND/sounds/touchtone.8.au" "/usr/demo/SOUND/sounds/touchtone.9.au" "/usr/demo/SOUND/sounds/touchtone.pound.au" "/usr/demo/SOUND/sounds/touchtone.star.au"])) nil [123446 124188]) ("bbdb-modem-dial" variable nil nil [124190 124566]) ("bbdb-modem-device" variable (:default-value "/dev/modem") nil [124568 124762]) ("bbdb-sound-volume" variable (:default-value 50) nil [124764 124960]) ("bbdb-play-sound" function (:arguments ("num" "&optional" "volume")) nil [124962 126092]) ("if" code nil nil [126114 126222]) ("bbdb-dial-number" function (:user-visible-flag t :arguments ("phone-string")) nil [126225 127812]) ("bbdb-dial" function (:user-visible-flag t :arguments ("phone" "force-area-code")) nil [127829 129692]) ("bbdb-get-record" function (:arguments ("prompt")) nil [129735 130166]) ("bbdb-finger-buffer-name" variable (:default-value "*finger*") nil [130305 130459]) ("bbdb-finger-internal" function (:arguments ("address")) nil [130461 131659]) ("bbdb-remaining-addrs-to-finger" variable nil nil [131675 131714]) ("bbdb-finger-process-sentinel" function (:arguments ("process" "s")) nil [131715 132395]) ("bbdb-finger-host-field" variable (:user-visible-flag t :default-value (quote finger-host)) nil [132397 132562]) ("bbdb-record-finger-host" function (:arguments ("record")) nil [132564 132824]) ("bbdb-finger" function (:user-visible-flag t :arguments ("record" "&optional" "which-address")) nil [132841 135269]) ("bbdb-remove-duplicate-nets" function (:user-visible-flag t :arguments ("records")) nil [135272 135774]) ("bbdb-find-duplicates" function (:arguments ("&optional" "fields")) nil [135776 137680]) ("bbdb-show-duplicates" function (:user-visible-flag t :arguments ("&optional" "fields")) nil [137682 138186]) ("bbdb-kill-older" function (:user-visible-flag t :arguments ("date" "&optional" "compare" "function")) nil [138213 139143]) ("bbdb-compare-records" function (:arguments ("cmpval" "field" "compare")) nil [139145 139491]) ("bbdb-timestamp-older" function (:user-visible-flag t :arguments ("date")) nil [139508 139750]) ("bbdb-timestamp-newer" function (:user-visible-flag t :arguments ("date")) nil [139767 140009]) ("bbdb-creation-older" function (:user-visible-flag t :arguments ("date")) nil [140026 140275]) ("bbdb-creation-newer" function (:user-visible-flag t :arguments ("date")) nil [140292 140541]) ("bbdb-creation-no-change" function (:user-visible-flag t) nil [140558 140810]) ("bbdb-info-file" variable (:user-visible-flag t) nil [140840 141072]) ("bbdb-info" function nil nil [141089 141324]) ("bbdb-help" function nil nil [141341 141628]) ("or" code nil nil [141631 141787]) ("if" code nil nil [141862 142068]) ("bbdb-update-records-mode" variable (:default-value (quote annotating)) nil [142085 142985]) ("bbdb-offer-to-create" variable nil nil [142987 143136]) ("bbdb-address" variable nil nil [143137 143278]) ("bbdb-update-address-class" variable nil nil [143280 143503]) ("bbdb-update-address-header" variable nil nil [143505 143715]) ("bbdb-update-records" function (:arguments ("addrs" "auto-create-p" "offer-to-create")) nil [143732 147820]) ("bbdb-get-help-window" function (:arguments ("message")) nil [147822 148473]) ("bbdb-kill-help-window" function (:arguments ("window")) nil [148475 148644]) ("bbdb-prompt-for-create" function nil nil [148924 151298]) ("bbdb-get-addresses-headers" variable (:user-visible-flag t :default-value (quote ((authors "From" "Resent-From" "Reply-To") (recipients "Resent-To" "Resent-CC" "To" "CC" "BCC")))) nil [151315 151664]) ("bbdb-get-only-first-address-p" variable (:user-visible-flag t :default-value t) nil [151681 151970]) ("bbdb-get-addresses" function (:arguments ("only-first-address" "uninteresting-senders" "get-header-content-function" "&rest" "get-header-content-function-args")) nil [151972 153667]) ("bbdb-com" package nil nil [153669 153688]))
    :file "bbdb-com.el"
    :pointmax 153689
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
